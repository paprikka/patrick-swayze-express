{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap f79fa9c46b6a583ab51c","webpack:///./node_modules/rxjs/util/root.js","webpack:///./node_modules/rxjs/util/isFunction.js","webpack:///./node_modules/rxjs/util/errorObject.js","webpack:///./node_modules/rxjs/Observer.js","webpack:///./node_modules/rxjs/symbol/rxSubscriber.js","webpack:///./src/index.js","webpack:///./src/getEntries.js","webpack:///./node_modules/rxjs/Observable.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/rxjs/util/toSubscriber.js","webpack:///./node_modules/rxjs/Subscriber.js","webpack:///./node_modules/rxjs/Subscription.js","webpack:///./node_modules/rxjs/util/isArray.js","webpack:///./node_modules/rxjs/util/isObject.js","webpack:///./node_modules/rxjs/util/tryCatch.js","webpack:///./node_modules/rxjs/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/symbol/observable.js","webpack:///./node_modules/rxjs/util/pipe.js","webpack:///./node_modules/rxjs/util/noop.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__window","window","__self","WorkerGlobalScope","_root","global","Error","isFunction","x","errorObject","e","empty","closed","next","value","error","err","complete","Symbol","rxSubscriber","for","$$rxSubscriber","_getEntries","_Observable","windowOrContentWindow","Observable","of","mergeMap","win","timer","from","performance","getEntries","distinct","getEntriesWatcher$","throw","root_1","toSubscriber_1","observable_1","pipe_1","subscribe","_isScalar","_subscribe","lift","operator","observable","source","observerOrNext","sink","toSubscriber","add","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","forEach","PromiseCtor","_this","Rx","config","Promise","resolve","reject","subscription","unsubscribe","subscriber","pipe","operations","_i","arguments","length","pipeFromArray","toPromise","create","g","Function","eval","Subscriber_1","rxSubscriber_1","Observer_1","nextOrObserver","Subscriber","__extends","b","__","constructor","isFunction_1","Subscription_1","_super","destinationOrNext","isStopped","destination","SafeSubscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parent","_parents","Subscription","_parentSubscriber","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","parent","_unsubscribe","isArray_1","isObject_1","tryCatch_1","errorObject_1","UnsubscriptionError_1","_subscriptions","errors","hasErrors","index","len","remove","tryCatch","UnsubscriptionError","flattenUnsubscriptionErrors","isArray","sub","isObject","concat","push","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","reduce","errs","Array","tryCatchTarget","tryCatcher","apply","map","toString","join","stack","message","getSymbolObservable","$$observable","noop_1","fns","input","prev","noop"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pse\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pse\"] = factory();\n\telse\n\t\troot[\"pse\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f79fa9c46b6a583ab51c","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/root.js\n// module id = 0\n// module chunks = 0","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/isFunction.js\n// module id = 1\n// module chunks = 0","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/errorObject.js\n// module id = 2\n// module chunks = 0","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/Observer.js\n// module id = 3\n// module chunks = 0","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/symbol/rxSubscriber.js\n// module id = 4\n// module chunks = 0","export { getEntries$ } from './getEntries'\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","import { Observable } from 'rxjs/Observable'\n\n\nconst throwMissingWindow$ = () =>\n    Observable\n        .throw( new Error( 'Please provide a window instance as the first argument.' ) )\n\n\nconst getEntriesWatcher$ = win =>\n    Observable\n        .timer( 0, 200 )\n        .mergeMap( () => Observable.from( win.performance.getEntries() ) )\n        .distinct()\n\n\nexport const getEntries$ = windowOrContentWindow =>\n    Observable\n        .of( windowOrContentWindow )\n        .mergeMap( win =>\n            ( win\n                ? getEntriesWatcher$( win )\n                : throwMissingWindow$() ) )\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/getEntries.js","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/Observable.js\n// module id = 7\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 8\n// module chunks = 0","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/toSubscriber.js\n// module id = 9\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        this.destination = destinationOrNext;\n                        this.destination.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=Subscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/Subscriber.js\n// module id = 10\n// module chunks = 0","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/Subscription.js\n// module id = 11\n// module chunks = 0","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/isArray.js\n// module id = 12\n// module chunks = 0","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/isObject.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/tryCatch.js\n// module id = 14\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/UnsubscriptionError.js\n// module id = 15\n// module chunks = 0","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/symbol/observable.js\n// module id = 16\n// module chunks = 0","\"use strict\";\nvar noop_1 = require('./noop');\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n//# sourceMappingURL=pipe.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/pipe.js\n// module id = 17\n// module chunks = 0","\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n//# sourceMappingURL=noop.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/util/noop.js\n// module id = 18\n// module chunks = 0"],"sourceRoot":""}